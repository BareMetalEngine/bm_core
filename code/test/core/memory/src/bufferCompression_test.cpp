/***
* Inferno Engine v4
* Written by Tomasz Jonarski (RexDex)
* Source code licensed under LGPL 3.0 license
***/

#include "build.h"
#include "bm/core/memory/include/bufferView.h"
#include "bm/core/memory/include/buffer.h"

BEGIN_INFERNO_NAMESPACE()

//---

static const char* LOREM_IPSUM = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Praesent sed sem orci. Etiam ut imperdiet leo. Duis gravida lectus vitae enim scelerisque ornare. Suspendisse volutpat mi eget felis dignissim porttitor. In at sem ac elit semper sollicitudin a in augue. Pellentesque a volutpat velit. Sed non aliquet leo. Vestibulum euismod augue sed nunc aliquam, sit amet molestie nisi rhoncus. Duis congue vestibulum ante, et luctus est bibendum nec. Quisque id enim quis mi fermentum rutrum. Aenean eu metus felis.";
static const uint8_t LOREM_IPSUM_ZLIB[304] = { 0x78,0xDA,0x45,0x90,0xC1,0x6A,0xC4,0x30,0x0C,0x44,0x7F,0x65,0x3E,0x60,0xF1,0x3F,0x14,0xDA,0x43,0xA1,0x87,0x96,0x85,0xDE,0xBD,0xB6,0x9A,0x0A,0x6C,0x39,0x6B,0x49,0xF9,0xFE,0x2A,0xC9,0xD2,0x3D,0x38,0x98,0x68,0x3C,0x9A,0x79,0x1F,0x63,0x52,0x07,0xAF,0xEA,0x1D,0x75,0xB4,0x31,0xA1,0x6C,0xC8,0x9D,0xEC,0x82,0x32,0x44,0xA9,0x18,0x99,0x4F,0xE4,0xCA,0x2B,0x6B,0x61,0x59,0x40,0x8D,0x2D,0xE1,0x73,0x66,0x52,0x12,0x83,0x52,0x8D,0xD3,0x31,0x66,0xE1,0x84,0x37,0xE3,0xDC,0xE1,0x06,0xEE,0x2B,0xCD,0xCA,0x64,0x68,0x34,0x12,0x5E,0x9D,0x15,0xCB,0xCC,0x1B,0xD7,0x1C,0x7F,0x8A,0xB9,0x62,0x63,0xCB,0x04,0x12,0xEE,0xD0,0x42,0x8D,0x26,0xEB,0xDD,0x29,0x8C,0x24,0x4F,0x4A,0xB8,0xBA,0xAE,0x24,0x95,0x55,0x09,0xDB,0x68,0x6E,0x6B,0x36,0x74,0x06,0x2D,0x61,0xFA,0x13,0x29,0x14,0x95,0x17,0x89,0x79,0x18,0xAC,0x63,0x9A,0xB1,0x8D,0x99,0xF0,0x2E,0xC8,0x76,0x44,0xCA,0xE5,0x08,0xBB,0xDF,0x23,0x0C,0x74,0xB4,0xC6,0x85,0xCD,0x2B,0x87,0x04,0xFB,0xC7,0x17,0x8F,0x4D,0x9F,0xD4,0x5A,0x54,0xA1,0x63,0x7D,0x7E,0x2E,0xDB,0xCE,0xAA,0xD7,0x68,0x28,0x23,0xD4,0x8D,0x43,0xF0,0x28,0xF4,0x4D,0x6A,0x7C,0xF3,0x16,0xDC,0x28,0xBA,0xF5,0x51,0x4F,0xB7,0x83,0x87,0xB8,0x94,0x53,0x9E,0xFB,0xE5,0x9F,0x28,0xFA,0x68,0xFB,0x2B,0x42,0x84,0x66,0xCC,0xDF,0x21,0xC5,0xF5,0xC1,0x26,0x60,0xEF,0xAF,0xB7,0xA7,0x6D,0x8E,0x44,0x17,0xEC,0xFB,0xFC,0xC0,0x15,0x13,0xDC,0xF8,0x16,0x48,0x62,0x28,0x54,0x12,0xBE,0xFC,0x24,0xC6,0xF5,0xA4,0x78,0xDF,0x8D,0x82,0xD0,0x0F,0xCD,0x1E,0x7D,0x42,0x36,0xDD,0xA6,0xF7,0x84,0x17,0x12,0xCA,0x12,0x49,0x11,0x39,0xC2,0xEB,0xC0,0x97,0xFE,0x00,0x95,0x88,0xBA,0xE3 };
static const uint8_t LOREM_IPSUM_LZ4[462] = { 0xF0,0xC8,0x4C,0x6F,0x72,0x65,0x6D,0x20,0x69,0x70,0x73,0x75,0x6D,0x20,0x64,0x6F,0x6C,0x6F,0x72,0x20,0x73,0x69,0x74,0x20,0x61,0x6D,0x65,0x74,0x2C,0x20,0x63,0x6F,0x6E,0x73,0x65,0x63,0x74,0x65,0x74,0x75,0x72,0x20,0x61,0x64,0x69,0x70,0x69,0x73,0x63,0x69,0x6E,0x67,0x20,0x65,0x6C,0x69,0x74,0x2E,0x20,0x50,0x72,0x61,0x65,0x73,0x65,0x6E,0x74,0x20,0x73,0x65,0x64,0x20,0x73,0x65,0x6D,0x20,0x6F,0x72,0x63,0x69,0x2E,0x20,0x45,0x74,0x69,0x61,0x6D,0x20,0x75,0x74,0x20,0x69,0x6D,0x70,0x65,0x72,0x64,0x69,0x65,0x74,0x20,0x6C,0x65,0x6F,0x2E,0x20,0x44,0x75,0x69,0x73,0x20,0x67,0x72,0x61,0x76,0x69,0x64,0x61,0x20,0x6C,0x65,0x63,0x74,0x75,0x73,0x20,0x76,0x69,0x74,0x61,0x65,0x20,0x65,0x6E,0x69,0x6D,0x20,0x73,0x63,0x65,0x6C,0x65,0x72,0x69,0x73,0x71,0x75,0x65,0x20,0x6F,0x72,0x6E,0x61,0x72,0x65,0x2E,0x20,0x53,0x75,0x73,0x70,0x65,0x6E,0x64,0x69,0x73,0x73,0x65,0x20,0x76,0x6F,0x6C,0x75,0x74,0x70,0x61,0x74,0x20,0x6D,0x69,0x20,0x65,0x67,0x65,0x74,0x20,0x66,0x65,0x6C,0x69,0x73,0x20,0x64,0x69,0x67,0x6E,0x69,0x73,0x73,0x69,0x6D,0x20,0x70,0x6F,0x72,0x74,0x74,0x69,0x74,0x6F,0x72,0x2E,0x20,0x49,0x6E,0x20,0x61,0x97,0x00,0x41,0x6D,0x20,0x61,0x63,0xAD,0x00,0x30,0x20,0x73,0x65,0x8D,0x00,0xF0,0x01,0x20,0x73,0x6F,0x6C,0x6C,0x69,0x63,0x69,0x74,0x75,0x64,0x69,0x6E,0x20,0x61,0x20,0x05,0x00,0xE1,0x75,0x67,0x75,0x65,0x2E,0x20,0x50,0x65,0x6C,0x6C,0x65,0x6E,0x74,0x65,0x7F,0x00,0x16,0x61,0x6D,0x00,0x12,0x76,0xEB,0x00,0xD4,0x53,0x65,0x64,0x20,0x6E,0x6F,0x6E,0x20,0x61,0x6C,0x69,0x71,0x75,0xD1,0x00,0xF2,0x03,0x56,0x65,0x73,0x74,0x69,0x62,0x75,0x6C,0x75,0x6D,0x20,0x65,0x75,0x69,0x73,0x6D,0x6F,0x64,0x4E,0x00,0x01,0x10,0x01,0x42,0x6E,0x75,0x6E,0x63,0x2F,0x00,0x35,0x61,0x6D,0x2C,0x52,0x01,0x40,0x20,0x6D,0x6F,0x6C,0x36,0x00,0xE3,0x65,0x20,0x6E,0x69,0x73,0x69,0x20,0x72,0x68,0x6F,0x6E,0x63,0x75,0x73,0x1C,0x01,0x80,0x63,0x6F,0x6E,0x67,0x75,0x65,0x20,0x76,0x21,0x00,0x02,0x57,0x00,0x60,0x61,0x6E,0x74,0x65,0x2C,0x20,0x70,0x00,0x11,0x75,0x2F,0x01,0xF1,0x06,0x65,0x73,0x74,0x20,0x62,0x69,0x62,0x65,0x6E,0x64,0x75,0x6D,0x20,0x6E,0x65,0x63,0x2E,0x20,0x51,0x75,0x69,0xB3,0x00,0x22,0x69,0x64,0x46,0x01,0xF0,0x21,0x71,0x75,0x69,0x73,0x20,0x6D,0x69,0x20,0x66,0x65,0x72,0x6D,0x65,0x6E,0x74,0x75,0x6D,0x20,0x72,0x75,0x74,0x72,0x75,0x6D,0x2E,0x20,0x41,0x65,0x6E,0x65,0x61,0x6E,0x20,0x65,0x75,0x20,0x6D,0x65,0x74,0x75,0x73,0x20,0x66,0x65,0x6C,0x69,0x73,0x2E };
static const uint8_t LOREM_IPSUM_LZ4HC[455] = { 0xF1,0xC9,0x4C,0x6F,0x72,0x65,0x6D,0x20,0x69,0x70,0x73,0x75,0x6D,0x20,0x64,0x6F,0x6C,0x6F,0x72,0x20,0x73,0x69,0x74,0x20,0x61,0x6D,0x65,0x74,0x2C,0x20,0x63,0x6F,0x6E,0x73,0x65,0x63,0x74,0x65,0x74,0x75,0x72,0x20,0x61,0x64,0x69,0x70,0x69,0x73,0x63,0x69,0x6E,0x67,0x20,0x65,0x6C,0x69,0x74,0x2E,0x20,0x50,0x72,0x61,0x65,0x73,0x65,0x6E,0x74,0x20,0x73,0x65,0x64,0x20,0x73,0x65,0x6D,0x20,0x6F,0x72,0x63,0x69,0x2E,0x20,0x45,0x74,0x69,0x61,0x6D,0x20,0x75,0x74,0x20,0x69,0x6D,0x70,0x65,0x72,0x64,0x69,0x65,0x74,0x20,0x6C,0x65,0x6F,0x2E,0x20,0x44,0x75,0x69,0x73,0x20,0x67,0x72,0x61,0x76,0x69,0x64,0x61,0x20,0x6C,0x65,0x63,0x74,0x75,0x73,0x20,0x76,0x69,0x74,0x61,0x65,0x20,0x65,0x6E,0x69,0x6D,0x20,0x73,0x63,0x65,0x6C,0x65,0x72,0x69,0x73,0x71,0x75,0x65,0x20,0x6F,0x72,0x6E,0x61,0x72,0x65,0x2E,0x20,0x53,0x75,0x73,0x70,0x65,0x6E,0x64,0x69,0x73,0x73,0x65,0x20,0x76,0x6F,0x6C,0x75,0x74,0x70,0x61,0x74,0x20,0x6D,0x69,0x20,0x65,0x67,0x65,0x74,0x20,0x66,0x65,0x6C,0x69,0x73,0x20,0x64,0x69,0x67,0x6E,0x69,0x73,0x73,0x69,0x6D,0x20,0x70,0x6F,0x72,0x74,0x74,0x69,0x74,0x6F,0x72,0x2E,0x20,0x49,0x6E,0x20,0x61,0x74,0x93,0x00,0x21,0x61,0x63,0xAD,0x00,0x00,0x0C,0x00,0xF0,0x04,0x70,0x65,0x72,0x20,0x73,0x6F,0x6C,0x6C,0x69,0x63,0x69,0x74,0x75,0x64,0x69,0x6E,0x20,0x61,0x20,0x05,0x00,0xE1,0x75,0x67,0x75,0x65,0x2E,0x20,0x50,0x65,0x6C,0x6C,0x65,0x6E,0x74,0x65,0x7F,0x00,0x16,0x61,0x6D,0x00,0x12,0x76,0xEB,0x00,0xD4,0x53,0x65,0x64,0x20,0x6E,0x6F,0x6E,0x20,0x61,0x6C,0x69,0x71,0x75,0xD1,0x00,0xF2,0x03,0x56,0x65,0x73,0x74,0x69,0x62,0x75,0x6C,0x75,0x6D,0x20,0x65,0x75,0x69,0x73,0x6D,0x6F,0x64,0x4E,0x00,0x01,0x10,0x01,0x42,0x6E,0x75,0x6E,0x63,0x2F,0x00,0x35,0x61,0x6D,0x2C,0x52,0x01,0x40,0x20,0x6D,0x6F,0x6C,0x36,0x00,0xE3,0x65,0x20,0x6E,0x69,0x73,0x69,0x20,0x72,0x68,0x6F,0x6E,0x63,0x75,0x73,0x1C,0x01,0x30,0x63,0x6F,0x6E,0x3E,0x00,0x16,0x76,0x57,0x00,0x60,0x61,0x6E,0x74,0x65,0x2C,0x20,0x70,0x00,0x11,0x75,0x2F,0x01,0xF2,0x05,0x65,0x73,0x74,0x20,0x62,0x69,0x62,0x65,0x6E,0x64,0x75,0x6D,0x20,0x6E,0x65,0x63,0x2E,0x20,0x51,0x75,0x32,0x01,0x22,0x69,0x64,0x46,0x01,0x10,0x71,0x49,0x00,0xF0,0x1C,0x6D,0x69,0x20,0x66,0x65,0x72,0x6D,0x65,0x6E,0x74,0x75,0x6D,0x20,0x72,0x75,0x74,0x72,0x75,0x6D,0x2E,0x20,0x41,0x65,0x6E,0x65,0x61,0x6E,0x20,0x65,0x75,0x20,0x6D,0x65,0x74,0x75,0x73,0x20,0x66,0x65,0x6C,0x69,0x73,0x2E };

//---

static BufferView CreateStringView(const char* str)
{
	if (str && *str)
		return BufferView(str, str + strlen(str));
	else
		return nullptr;
}

template< typename T >
static BufferView CreateDataView(const T& data)
{
	return BufferView(&data, sizeof(T));
}

static void PrintBuffer(BufferView view)
{
	fprintf(stdout, "[%u] = {", view.size());
	for (uint32_t i = 0; i < view.size(); ++i)
	{
		if (i) 	fprintf(stdout, ",");
		fprintf(stdout, "0x%02X", view.data()[i]);
	}
	fprintf(stdout, "}");
}

//--

TEST(CompressZlib, EmptyProducesEmpty)
{
	const auto txt = CreateStringView("");

	InplaceBufferOutputStream<uint8_t, 256> output;
	EXPECT_TRUE(txt.compress(CompressionType::Zlib, output));

	EXPECT_TRUE(output.empty());
}

TEST(CompressZlib, CompressesData)
{
	const auto txt = CreateStringView("TestTestTestTestTestTest");

	InplaceBufferOutputStream<uint8_t, 256> output;
	EXPECT_TRUE(txt.compress(CompressionType::Zlib, output));
	EXPECT_LT(output.size(), txt.size());
}

TEST(CompressZlib, CompressesFailsIfBufferToSmall)
{
	const auto txt = CreateStringView(LOREM_IPSUM);

	InplaceBufferOutputStream<uint8_t, 64> output;
	EXPECT_FALSE(txt.compress(CompressionType::Zlib, output));
}

TEST(CompressZlib, CompressesSampleData)
{
	const auto txt = CreateStringView(LOREM_IPSUM);

	InplaceBufferOutputStream<uint8_t, 1024> output;
	EXPECT_TRUE(txt.compress(CompressionType::Zlib, output));
	PrintBuffer(output);

	const auto compressedSize = sizeof(LOREM_IPSUM_ZLIB);
	EXPECT_EQ(compressedSize, output.size());	
	EXPECT_EQ(0, memcmp(LOREM_IPSUM_ZLIB, output.start(), compressedSize));
}

TEST(CompressZlib, CompressesSampleDataTightFit)
{
	const auto txt = CreateStringView(LOREM_IPSUM);

	InplaceBufferOutputStream<uint8_t, sizeof(LOREM_IPSUM_ZLIB)> output;
	EXPECT_TRUE(txt.compress(CompressionType::Zlib, output));

	const auto compressedSize = sizeof(LOREM_IPSUM_ZLIB);
	EXPECT_EQ(compressedSize, output.size());
	EXPECT_EQ(0, memcmp(LOREM_IPSUM_ZLIB, output.start(), compressedSize));
}

TEST(CompressZlib, CompressesFailsTightFitMinusOne)
{
	const auto txt = CreateStringView(LOREM_IPSUM);

	InplaceBufferOutputStream<uint8_t, sizeof(LOREM_IPSUM_ZLIB) - 1> output;
	EXPECT_FALSE(txt.compress(CompressionType::Zlib, output));
}


//--

TEST(DecompressZlib, EmptyProducesEmpty)
{
	const auto txt = CreateStringView("");

	InplaceBufferOutputStream<uint8_t, 256> output;
	EXPECT_TRUE(txt.decompress(CompressionType::Zlib, output));

	EXPECT_TRUE(output.empty());
}

TEST(DecompressZlib, DecompressSampleData)
{
	const auto txt = CreateDataView(LOREM_IPSUM_ZLIB);

	InplaceBufferOutputStream<uint8_t, 1024> output;
	EXPECT_TRUE(txt.decompress(CompressionType::Zlib, output));

	const auto uncompressedSize = strlen(LOREM_IPSUM);
	EXPECT_EQ(uncompressedSize, output.size());
	EXPECT_EQ(0, memcmp(LOREM_IPSUM, output.start(), uncompressedSize));
}

TEST(DecompressZlib, DecompressSampleDataFailsIfBufferToSmall)
{
	const auto txt = CreateDataView(LOREM_IPSUM_ZLIB);

	InplaceBufferOutputStream<uint8_t, 256> output;
	EXPECT_FALSE(txt.decompress(CompressionType::Zlib, output));
}

TEST(DecompressZlib, DecompressSampleDataTightFit)
{
	const auto txt = CreateDataView(LOREM_IPSUM_ZLIB);

	InplaceBufferOutputStream<uint8_t, 509> output;
	EXPECT_TRUE(txt.decompress(CompressionType::Zlib, output));

	const auto uncompressedSize = strlen(LOREM_IPSUM);
	EXPECT_EQ(uncompressedSize, output.size());
	EXPECT_EQ(0, memcmp(LOREM_IPSUM, output.start(), uncompressedSize));
}

TEST(DecompressZlib, DecompressSampleDataFailsTightFitMinusOne)
{
	const auto txt = CreateDataView(LOREM_IPSUM_ZLIB);

	InplaceBufferOutputStream<uint8_t, 508> output;
	EXPECT_FALSE(txt.decompress(CompressionType::Zlib, output));
}

//---

TEST(CompressLZ4, EmptyProducesEmpty)
{
	const auto txt = CreateStringView("");

	InplaceBufferOutputStream<uint8_t, 256> output;
	EXPECT_TRUE(txt.compress(CompressionType::LZ4, output));

	EXPECT_TRUE(output.empty());
}

TEST(CompressLZ4, CompressesData)
{
	const auto txt = CreateStringView("TestTestTestTestTestTest");

	InplaceBufferOutputStream<uint8_t, 256> output;
	EXPECT_TRUE(txt.compress(CompressionType::LZ4, output));
	EXPECT_LT(output.size(), txt.size());
}

TEST(CompressLZ4, CompressesFailsIfBufferToSmall)
{
	const auto txt = CreateStringView(LOREM_IPSUM);

	InplaceBufferOutputStream<uint8_t, 64> output;
	EXPECT_FALSE(txt.compress(CompressionType::LZ4, output));
}

TEST(CompressLZ4, CompressesSampleData)
{
	const auto txt = CreateStringView(LOREM_IPSUM);

	InplaceBufferOutputStream<uint8_t, 1024> output;
	EXPECT_TRUE(txt.compress(CompressionType::LZ4, output));
	PrintBuffer(output);

	const auto compressedSize = sizeof(LOREM_IPSUM_LZ4);
	EXPECT_EQ(compressedSize, output.size());
	EXPECT_EQ(0, memcmp(LOREM_IPSUM_LZ4, output.start(), compressedSize));
}

TEST(CompressLZ4, CompressesSampleDataTightFit)
{
	const auto txt = CreateStringView(LOREM_IPSUM);

	InplaceBufferOutputStream<uint8_t, sizeof(LOREM_IPSUM_LZ4)> output;
	EXPECT_TRUE(txt.compress(CompressionType::LZ4, output));

	const auto compressedSize = sizeof(LOREM_IPSUM_LZ4);
	EXPECT_EQ(compressedSize, output.size());
	EXPECT_EQ(0, memcmp(LOREM_IPSUM_LZ4, output.start(), compressedSize));
}

TEST(CompressLZ4, CompressesFailsTightFitMinusOne)
{
	const auto txt = CreateStringView(LOREM_IPSUM);

	InplaceBufferOutputStream<uint8_t, sizeof(LOREM_IPSUM_LZ4) - 1> output;
	EXPECT_FALSE(txt.compress(CompressionType::LZ4, output));
}


//--

TEST(DecompressLZ4, EmptyProducesEmpty)
{
	const auto txt = CreateStringView("");

	InplaceBufferOutputStream<uint8_t, 256> output;
	EXPECT_TRUE(txt.decompress(CompressionType::LZ4, output));

	EXPECT_TRUE(output.empty());
}

TEST(DecompressLZ4, DecompressSampleData)
{
	const auto txt = CreateDataView(LOREM_IPSUM_LZ4);

	InplaceBufferOutputStream<uint8_t, 1024> output;
	EXPECT_TRUE(txt.decompress(CompressionType::LZ4, output));

	const auto uncompressedSize = strlen(LOREM_IPSUM);
	EXPECT_EQ(uncompressedSize, output.size());
	EXPECT_EQ(0, memcmp(LOREM_IPSUM, output.start(), uncompressedSize));
}

TEST(DecompressLZ4, DecompressSampleDataFailsIfBufferToSmall)
{
	const auto txt = CreateDataView(LOREM_IPSUM_LZ4);

	InplaceBufferOutputStream<uint8_t, 256> output;
	EXPECT_FALSE(txt.decompress(CompressionType::LZ4, output));
}

TEST(DecompressLZ4, DecompressSampleDataTightFit)
{
	const auto txt = CreateDataView(LOREM_IPSUM_LZ4);

	InplaceBufferOutputStream<uint8_t, 509> output;
	EXPECT_TRUE(txt.decompress(CompressionType::LZ4, output));

	const auto uncompressedSize = strlen(LOREM_IPSUM);
	EXPECT_EQ(uncompressedSize, output.size());
	EXPECT_EQ(0, memcmp(LOREM_IPSUM, output.start(), uncompressedSize));
}

TEST(DecompressLZ4, DecompressSampleDataFailsTightFitMinusOne)
{
	const auto txt = CreateDataView(LOREM_IPSUM_LZ4);

	InplaceBufferOutputStream<uint8_t, 508> output;
	EXPECT_FALSE(txt.decompress(CompressionType::LZ4, output));
}

//--

TEST(CompressLZ4HC, EmptyProducesEmpty)
{
	const auto txt = CreateStringView("");

	InplaceBufferOutputStream<uint8_t, 256> output;
	EXPECT_TRUE(txt.compress(CompressionType::LZ4HC, output));

	EXPECT_TRUE(output.empty());
}

TEST(CompressLZ4HC, CompressesData)
{
	const auto txt = CreateStringView("TestTestTestTestTestTest");

	InplaceBufferOutputStream<uint8_t, 256> output;
	EXPECT_TRUE(txt.compress(CompressionType::LZ4HC, output));
	EXPECT_LT(output.size(), txt.size());
}

TEST(CompressLZ4HC, CompressesFailsIfBufferToSmall)
{
	const auto txt = CreateStringView(LOREM_IPSUM);

	InplaceBufferOutputStream<uint8_t, 64> output;
	EXPECT_FALSE(txt.compress(CompressionType::LZ4HC, output));
}

TEST(CompressLZ4HC, CompressesSampleData)
{
	const auto txt = CreateStringView(LOREM_IPSUM);

	InplaceBufferOutputStream<uint8_t, 1024> output;
	EXPECT_TRUE(txt.compress(CompressionType::LZ4HC, output));
	PrintBuffer(output);

	const auto compressedSize = sizeof(LOREM_IPSUM_LZ4HC);
	EXPECT_EQ(compressedSize, output.size());
	EXPECT_EQ(0, memcmp(LOREM_IPSUM_LZ4HC, output.start(), compressedSize));
}

TEST(CompressLZ4HC, CompressesSampleDataTightFit)
{
	const auto txt = CreateStringView(LOREM_IPSUM);

	InplaceBufferOutputStream<uint8_t, sizeof(LOREM_IPSUM_LZ4HC)> output;
	EXPECT_TRUE(txt.compress(CompressionType::LZ4HC, output));

	const auto compressedSize = sizeof(LOREM_IPSUM_LZ4HC);
	EXPECT_EQ(compressedSize, output.size());
	EXPECT_EQ(0, memcmp(LOREM_IPSUM_LZ4HC, output.start(), compressedSize));
}

TEST(CompressLZ4HC, CompressesFailsTightFitMinusOne)
{
	const auto txt = CreateStringView(LOREM_IPSUM);

	InplaceBufferOutputStream<uint8_t, sizeof(LOREM_IPSUM_LZ4HC) - 1> output;
	EXPECT_FALSE(txt.compress(CompressionType::LZ4HC, output));
}


//--

TEST(DecompressLZ4HC, EmptyProducesEmpty)
{
	const auto txt = CreateStringView("");

	InplaceBufferOutputStream<uint8_t, 256> output;
	EXPECT_TRUE(txt.decompress(CompressionType::LZ4HC, output));

	EXPECT_TRUE(output.empty());
}

TEST(DecompressLZ4HC, DecompressSampleData)
{
	const auto txt = CreateDataView(LOREM_IPSUM_LZ4HC);

	InplaceBufferOutputStream<uint8_t, 1024> output;
	EXPECT_TRUE(txt.decompress(CompressionType::LZ4HC, output));

	const auto uncompressedSize = strlen(LOREM_IPSUM);
	EXPECT_EQ(uncompressedSize, output.size());
	EXPECT_EQ(0, memcmp(LOREM_IPSUM, output.start(), uncompressedSize));
}

TEST(DecompressLZ4HC, DecompressSampleDataFailsIfBufferToSmall)
{
	const auto txt = CreateDataView(LOREM_IPSUM_LZ4HC);

	InplaceBufferOutputStream<uint8_t, 256> output;
	EXPECT_FALSE(txt.decompress(CompressionType::LZ4HC, output));
}

TEST(DecompressLZ4HC, DecompressSampleDataTightFit)
{
	const auto txt = CreateDataView(LOREM_IPSUM_LZ4HC);

	InplaceBufferOutputStream<uint8_t, 509> output;
	EXPECT_TRUE(txt.decompress(CompressionType::LZ4HC, output));

	const auto uncompressedSize = strlen(LOREM_IPSUM);
	EXPECT_EQ(uncompressedSize, output.size());
	EXPECT_EQ(0, memcmp(LOREM_IPSUM, output.start(), uncompressedSize));
}

TEST(DecompressLZ4HC, DecompressSampleDataFailsTightFitMinusOne)
{
	const auto txt = CreateDataView(LOREM_IPSUM_LZ4HC);

	InplaceBufferOutputStream<uint8_t, 508> output;
	EXPECT_FALSE(txt.decompress(CompressionType::LZ4HC, output));
}

//--
END_INFERNO_NAMESPACE()